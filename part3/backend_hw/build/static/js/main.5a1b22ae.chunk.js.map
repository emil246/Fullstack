{"version":3,"sources":["services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","message","info","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","Filter","value","onChange","Persons","persons","personRemove","console","log","map","person","index","key","name","number","onClick","PersonForm","onSubmit","onNameChange","onNumberChange","type","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","levelMessage","setLevelMessage","useEffect","personService","initialPersons","personsToShow","filter","toLowerCase","search","event","target","preventDefault","found","some","personObject","updatedObject","window","confirm","returnedPerson","setTimeout","catch","concat","error","find","p","filteredPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a1b22ae.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }\n","import React from \"react\";\n\nconst Notification = ({ message, info }) => {\n  const notificationStyle = {\n    color: 'green',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  }\n\n  const errorStyle = {\n    color: 'red',\n    background: 'lightgrey',\n    fontSize: 20,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  }\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={info ? notificationStyle : errorStyle}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [levelMessage, setLevelMessage] = useState(true)\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const addName = (event) => {\n    event.preventDefault();\n    const found = persons.some((person) => person.name === newName);\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n    if (!found) {\n      personService.create(personObject).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName(\"\");\n        setNewNumber(\"\");\n        setErrorMessage(\n          `Person ${returnedPerson.name} was added to server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      }).catch(error => {\n        setErrorMessage(\n          `${error.response.data.error}`\n        )\n        setLevelMessage(false)\n        setTimeout(() => {\n          setErrorMessage(null)\n          setLevelMessage(true)\n        }, 5000)\n        console.log(error.response.data)\n      });\n    } else {\n      let updatedObject = persons.filter((person) => person.name === newName)[0]\n      const confirmUpdate = window.confirm(`${updatedObject.name} already added, replace?`);\n      if (confirmUpdate) {\n        personService.update(updatedObject.id, personObject).then((returnedPerson) => {\n          setNewName(\"\");\n          setNewNumber(\"\");\n          personService.getAll().then((initialPersons) => {\n            setPersons(initialPersons);\n          });\n          setErrorMessage(\n            `Person ${updatedObject.name} updated`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(() => {\n          setErrorMessage(\n            `Person ${updatedObject.name} already deleted`\n          )\n          setLevelMessage(false)\n          setTimeout(() => {\n            setErrorMessage(null)\n            setLevelMessage(true)\n          }, 5000)\n          setPersons(persons.filter((person) => person.name !== newName));\n        });\n      }\n    }\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    console.log(personsToShow);\n    setNewFilter(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const personRemove = (id) => {\n      const person = persons.find((p) => p.id === id);\n      const confirmDelete = window.confirm(`Delete ${person.name}?`);\n      if (confirmDelete) {\n        personService.remove(id).then(() => {\n          const filteredPersons = persons.filter((person) => person.id !== id);\n          setPersons(filteredPersons);\n          setErrorMessage(\n            `Person ${person.name} deleted`\n          )\n          setLevelMessage(true)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n        .catch(() => {\n          setErrorMessage(\n            `Person ${person.name} already deleted`\n          )\n          setLevelMessage(false)\n          setTimeout(() => {\n            setErrorMessage(null)\n            setLevelMessage(true)\n          }, 5000)\n          setPersons(persons.filter((person) => person.id !== id));\n        });\n      }\n    };\n\n  const personsToShow = newFilter\n    ? persons.filter(\n        (person) => person.name.toLowerCase().search(newFilter) !== -1\n      )\n    : persons;\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} info = {levelMessage} />\n      <Filter value={newFilter} onChange={handleFilterChange} />\n      <p></p>\n      <PersonForm\n        onSubmit={addName}\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} personRemove={personRemove} />\n    </div>\n  );\n};\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      filter show with:\n      <input value={value} onChange={onChange} />\n    </div>\n  );\n};\n\n\nconst Persons = ({ persons, personRemove }) => {\n  if (persons) {\n    console.log(persons);\n    return (\n      <div>\n        {persons.map((person, index) => (\n          <p key={index}>{person.name} {person.number}\n          <button onClick={() => personRemove(person.id)}>\n          Delete\n          </button>\n          </p>\n        ))}\n      </div>\n    );\n  } else {\n    console.log(\"Хуй\");\n    return <div></div>;\n  }\n};\n\nconst PersonForm = ({\n  onSubmit,\n  name,\n  number,\n  onNameChange,\n  onNumberChange,\n}) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input value={name} onChange={onNameChange} />\n      </div>\n      <div>\n        number: <input value={number} onChange={onNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}